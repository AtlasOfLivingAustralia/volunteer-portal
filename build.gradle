import org.apache.tools.ant.filters.ReplaceTokens

import static org.springframework.boot.gradle.SpringBootPluginExtension.LayoutType.*

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.postgresql:postgresql:$postgresVersion" // for flyway
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.2.0"
    id 'nu.studer.jooq' version '2.0.7'
    id 'pl.codelabs.flywayJooq' version '1.3.1'
    //    id "com.moowork.node" version "1.1.1"
}

version "5.2.2"
group "au.org.ala"
description "Digivol application"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply from: 'https://raw.githubusercontent.com/AtlasOfLivingAustralia/travis-build-configuration/master/travis_grails_publish.gradle'

def ci = System.env.CI == 'true'
def localProps = file("$project.rootDir/local.properties")
if (localProps.exists()) {
    localProps.withReader {
        def props = new Properties()
        props.load(it)
        project.ext.local = props
    }
} else {
    logger.error("No local.properties file found for flyway/jooq")
    project.ext.local = new Properties()
}
flyway {
    url = project.ext.local.flywayUrl
    user = project.ext.local.flywayUsername
    password = project.ext.local.flywayPassword
    baselineOnMigrate = project.ext.local.flywayBaselineOnMigrate?.toBoolean() ?: false
    outOfOrder = project.ext.local.flywayOutOfOrder?.toBoolean() ?: false
}
jooq {
//        version = "${ext['jooq.version']}"
//        edition = 'OSS'
    volunteer(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = project.ext.local.flywayUrl
            user = project.ext.local.flywayUsername
            password = project.ext.local.flywayPassword
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'
//                    forcedTypes {
//                        forcedType {
//                            name = 'varchar'
//                            expression = '.*'
//                            types = 'JSONB?'
//                        }
//                        forcedType {
//                            name = 'varchar'
//                            expression = '.*'
//                            types = 'INET'
//                        }
//                    }
                // ...
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
                // ...
            }
            target {
                packageName = 'au.org.ala.volunteer.jooq'
                // directory = ...
            }
        }
    }
}
generateVolunteerJooqSchemaSource.dependsOn flywayMigrate

// override spring boot dependency management versions here
ext {
//    set "tomcat.version", "8.5.20" // use this to force a tomcat version
    set "jooq.version", '3.10.5'
}

repositories {
    mavenLocal()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
    jcenter()
}

// not in 3.2.7 by default?
//dependencyManagement {
//    imports {
//        mavenBom "org.grails:grails-bom:$grailsVersion"
//    }
//    applyMavenExclusions false
//}

dependencies {
    // Grails 3.2.11
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    compile "org.hibernate:hibernate-core:5.1.3.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.3.Final"
    console "org.grails:grails-console"
    compile "com.drewnoakes:metadata-extractor:2.11.0"
    profile "org.grails.profiles:web"
    compile "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    assets "com.bertramlabs.plugins:sass-asset-pipeline:$assetPipelineVersion"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    compile "org.grails.plugins:grails-java8"
    compile "org.grails.plugins:rxjava2:2.0.0"
    compile "org.hibernate:hibernate-java8:5.1.3.Final"

    // Additional Plugins
    compile 'org.grails.plugins:cache-headers:2.0.2'
    compile 'org.grails.plugins:csv:1.0.ALA.3'
    compile 'org.grails.plugins:postgresql-extensions:5.2.0'
    compile 'org.grails.plugins:mail:2.0.0.RC6'
    compile 'org.grails.plugins:grails-executor:0.4' // used in TaskLoadService.backgroundProcessQueue
    compile 'org.grails.plugins:grails-markdown:3.0.0' // may need modifications?
    compile 'org.grails.plugins:grails-pretty-time:4.0.0' // may need modifications?
    compile 'org.grails.plugins:quartz:2.0.12'
    compile 'org.grails.plugins:grails-google-visualization:2.2'
    compile 'org.grails.plugins:external-config:1.1.2'
    // TODO ALA Plugins: image service (is it used anywhere?)
    compile 'org.grails.plugins:ala-auth:3.0.3'
    compile 'au.org.ala:userdetails-service-client:1.3.0' // override this to for external properties changes
    compile 'org.grails.plugins:cache-ehcache:2.0.0.BUILD-SNAPSHOT'
    // TODO Collection Event Controller?

    // BOOTSTRAP, FONT-AWESOME?  NPM?  Yarn? webjars ?
//    compile 'org.webjars:bootstrap:3.3.7-1'
//    compile 'org.webjars:angularjs:1.6.1'
//    compile 'org.webjars:font-awesome:4.7.0'

    // Dependencies
    runtime "org.postgresql:postgresql:$postgresVersion"
    compile 'org.imgscalr:imgscalr-lib:4.2'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.google.guava:guava:19.0'
    compile 'org.apache.commons:commons-compress:1.11'
    compile 'org.apache.commons:commons-pool2:2.4.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile 'org.elasticsearch:elasticsearch:1.3.5'
    // optional for elastic search, version should match elastic search optional dep
    compile group: 'org.apache.lucene', name: 'lucene-expressions', version: '4.9.1'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'org.freemarker:freemarker:2.3.23'
    compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20160526.1-ALA'
    compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'

    // DB migrations, etc
    compile 'org.jooq:jooq'
    jooqRuntime "org.postgresql:postgresql:$postgresVersion"
    compile "org.flywaydb:flyway-core:4.2.0"

    // For logback filter
    compile 'org.codehaus.janino:janino:3.0.6'

}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always', '-Xmx8000m')
//    addResources = true // enable for reloading src/main/resources when using gradle bootRun, disables processResources
}

springBoot {
    layout = WAR
}

bootRepackage {
    enabled = true
    executable = true
    classifier = 'exec'

    embeddedLaunchScriptProperties = [
                    initInfoDescription: project.description,
                    initInfoShortDescription: project.name,
                    initInfoProvides: jar.baseName,
//                    mode: 'service'
            ]
}

assets {
    minifyJs = true
    minifyCss = true
    enableSourceMaps = true
    includes = ['tinymce/**/*', 'compile/**/*.ttf', 'compile/**/*.otf', 'compile/**/*.eot', 'compile/**/*.svg', 'compile/**/*.woff', 'compile/**/*.woff2', 'compile/**/*.png', 'compile/**/*.jpg', 'compile/**/*.gif']
    excludes = ['compile/*', 'compile/**/*']
//    excludes = ['codemirror/**/*.html', "**/*.min.js", "**/*.min.css", "angular/*/i18n/**", "**/*.map"]
//    includes = ["fonts/*", "node_modules/*", "lib/*"]
//    excludes = ["**/*.min.js", "**/*"]
}

def gitSha() {
    execOutput 'git rev-parse --short HEAD'
}

def gitTimestamp() {
    execOutput 'git log -n 1 --format=%at'
}

def gitBranch() {
    execOutput 'git rev-parse --abbrev-ref HEAD'
}

String execOutput(String exec) {
    def p = exec.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        final text = p.errorStream.text
        logger.warn(text)
        return text
    }
    return p.text.trim()
}

def envProp(String name, defaultValue = 'UNKNOWN' ) {
    System.getenv(name) ?: System.getProperty(name) ?: (defaultValue instanceof Closure ? defaultValue() : defaultValue)?.toString()
}

processResources {
    filesMatching("**/*.yml") {
        filter(ReplaceTokens, tokens: [
                'info.build.ci' : envProp('CI', 'false'),
                'info.build.date' : new Date().toString(),
                'info.build.jdk' : envProp('TRAVIS_JDK_VERSION', System.getProperty('java.version')),
                'info.build.number' : envProp('TRAVIS_BUILD_NUMBER'),
                'info.git.branch' : envProp('TRAVIS_BRANCH', { gitBranch() }),
                'info.git.commit' : envProp('TRAVIS_COMMIT', { gitSha() }),
                'info.git.slug' : envProp('TRAVIS_REPO_SLUG'),
                'info.git.tag' : envProp('TRAVIS_TAG'),
                'info.git.timestamp' : gitTimestamp()
        ])
    }
}

publish {
    dependsOn assemble
}


//node {
//    // Version of node to use.
//    version = '6.9.4'
//
//    // Version of npm to use.
//    npmVersion = '3.10.10'
//
//    // Version of Yarn to use.
//    yarnVersion = '0.16.1'
//
//    // Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'
//
//    // If true, it will download node using above parameters.
//    // If false, it will try to use globally installed node.
//    download = false
//
//    // Set the work directory for unpacking node
//    workDir = file("${project.buildDir}/nodejs")
//
//    // Set the work directory for NPM
//    npmWorkDir = file("${project.buildDir}/npm")
//
//    // Set the work directory for Yarn
//    yarnWorkDir = file("${project.buildDir}/yarn")
//
//    // Set the work directory where node_modules should be located
//    nodeModulesDir = file("${project.projectDir}/grails-app/assets")
//}
