import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
//        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "org.postgresql:postgresql:$postgresVersion" // for flyway
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
    }
}

plugins {
    id "org.flywaydb.flyway" version "9.6.0"
    id 'nu.studer.jooq' version '4.2'
    //id 'pl.codelabs.flywayJooq' version '1.3.1'
    // Gradle Fix for Windows long paths (i.e. Java installed in Program Files/Java/...etc
    id "com.virgo47.ClasspathJar" version "1.0.0"
    id 'java'
}

version "6.1.5-SNAPSHOT"
group "au.org.ala"
description "Digivol application"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
//apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"com.bertramlabs.asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.energizedwork.webdriver-binaries"

repositories {
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven {
        url 'https://repo.maven.apache.org/maven2'
        name 'Maven Central'
    }
}

configurations {
    developmentOnly
    flywayMigration
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:$hibernateVersion"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.2" // 2.1.2-b03"
    runtime "javax.xml.bind:jaxb-api:2.3.1"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    runtime "org.springframework.boot:spring-boot-properties-migrator"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-safari-driver:$seleniumSafariDriverVersion"

    // Extra official Grails plugins
    compile "org.grails.plugins:converters"
    compile "org.grails:grails-async-gpars"
    compile "org.grails:grails-events-rxjava2"
    compile "org.grails.plugins:rxjava2:2.0.0"
    compile "org.codehaus.gpars:gpars:1.2.1" // Added for the GPars dependencies.
    compile "io.reactivex.rxjava2:rxjava:2.2.21"
    compile "org.grails:grails-datastore-gorm-async:${gormVersion}"

    assets "com.bertramlabs.plugins:sass-asset-pipeline:$assetPipelineVersion"
    testCompile "org.grails:grails-test-mixins:3.3.0" // For legacy @TestMixin and @TestFor

    // Additional Plugins
    compile "org.hibernate:hibernate-ehcache:$hibernateVersion"
    compile "org.hibernate:hibernate-java8:$hibernateVersion"

    compile 'org.grails.plugins:cache-headers:2.0.2'
    compile 'org.grails.plugins:csv:1.0.ALA.3'
    compile 'org.grails.plugins:postgresql-extensions:6.1.0'
    compile 'org.grails.plugins:mail:3.0.0' //old: 2.0.1
    compile 'org.grails.plugins:grails-executor:0.4' // used in TaskLoadService.backgroundProcessQueue
    compile 'org.grails.plugins:grails-markdown:3.0.0' // may need modifications?
    compile 'org.grails.plugins:grails-pretty-time:4.0.0' // may need modifications?
    //compile 'org.grails.plugins:quartz:2.0.12'
    compile("org.quartz-scheduler:quartz:2.2.3") {
        exclude group: 'slf4j-api', module: 'c3p0'
    }
    compile 'org.grails.plugins:quartz:2.0.13'
    compile 'org.grails.plugins:grails-google-visualization:2.2'
    compile 'dk.glasius:external-config:2.0.1'
    compile 'org.grails.plugins:cache-ehcache:3.0.0'
    compile 'org.ehcache:ehcache:3.4.0' // Prevent cache-ehcache dependent version being overridden


    // ALA Plugins
    compile 'org.grails.plugins:ala-auth:3.2.3'
    compile 'au.org.ala:ala-cas-client:3.0.0'
    compile 'au.org.ala:userdetails-service-client:1.5.0' // override this to for external properties changes
    compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20160526.1-ALA'

    // Dependencies
    runtime "org.postgresql:postgresql:$postgresVersion"
    runtime "com.zaxxer:HikariCP:4.0.3"

    runtime "org.slf4j:jul-to-slf4j:1.7.36"
    runtime "org.slf4j:log4j-over-slf4j:1.7.36"

    compile "com.drewnoakes:metadata-extractor:2.18.0"
    compile 'org.imgscalr:imgscalr-lib:4.2'
    compile 'com.squareup.retrofit2:retrofit:2.4.0'
    compile 'com.squareup.retrofit2:converter-gson:2.4.0'
    compile 'com.google.guava:guava:19.0'
    compile 'com.github.ben-manes.caffeine:caffeine:3.1.1' // old: 2.8.0
    compile 'org.apache.commons:commons-compress:1.11'
    compile 'org.apache.commons:commons-pool2:2.11.1' // old: 2.4.2
    compile group: 'commons-io', name: 'commons-io', version: '2.11.0' //''2.5'
    compile 'org.elasticsearch:elasticsearch:2.4.6'
    // optional for elastic search, version should match elastic search optional dep
    compile group: 'org.apache.lucene', name: 'lucene-expressions', version: '4.9.1' //6.0.0 for ES 5.0, 8.11.1 for ES 7.17
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'org.freemarker:freemarker:2.3.31'
    compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'
    compile 'org.ocpsoft.prettytime:prettytime:4.0.0.Final'

    // DB migrations, etc
    // compile 'org.jooq:jooq'
    flywayMigration "org.postgresql:postgresql:$postgresVersion"
    jooqRuntime "org.postgresql:postgresql:$postgresVersion"
    compile 'org.flywaydb:flyway-core:9.6.0'
    implementation 'org.jooq:jooq'

    // For logback filter
    compile 'org.codehaus.janino:janino'
}

// Flyware/Jooq setup
def ci = System.env.CI == 'true'
def localProps = file("$project.rootDir/local.properties")
if (localProps.exists()) {
    localProps.withReader {
        def props = new Properties()
        props.load(it)
        project.ext.local = props
    }
} else {
    logger.error("No local.properties file found for flyway/jooq")
    project.ext.local = new Properties()
}

flyway {
    configurations = ['flywayMigration']
    url = project.ext.local.flywayUrl
    user = project.ext.local.flywayUsername
    password = project.ext.local.flywayPassword
    table = project.ext.local.flywayTable
    baselineOnMigrate = project.ext.local.flywayBaselineOnMigrate?.toBoolean() ?: false
    outOfOrder = project.ext.local.flywayOutOfOrder?.toBoolean() ?: false
}

jooq {
    version = '3.13.1' // the default (can be omitted) (old was 3.11.9)
    edition = 'OSS'    // the default (can be omitted), other allowed values are PRO, PRO_JAVA_8, PRO_JAVA_6, TRIAL, TRIAL_JAVA_8, TRIAL_JAVA_6
    volunteer(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = project.ext.local.flywayUrl
            user = project.ext.local.flywayUsername
            password = project.ext.local.flywayPassword
        }
        generator {
            name = 'org.jooq.codegen.JavaGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                forcedTypes {
                    forcedType {
                        userType = 'java.lang.Object'
                        binding = 'au.org.ala.volunteer.jooq.PostgresJSONMoshiBinding'
                        expression = '.*'
                        types = 'JSONB?'
                    }
                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'au.org.ala.volunteer.jooq'
            }
        }
    }
}
generateVolunteerJooqSchemaSource.dependsOn flywayMigrate

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

springBoot {
//    layout = WAR
    mainClassName = 'au.org.ala.volunteer.Application'
    buildInfo()
}

bootJar { // Grails 4 replaces bootRepackage //
    enabled = true
    launchScript {
        properties 'initInfoDescription': project.description,
                initInfoShortDescription: project.name,
                initInfoProvides: jar.baseName
    } // executable = true
    classifier = 'exec'

//    embeddedLaunchScriptProperties = [
//            initInfoDescription: project.description,
//            initInfoShortDescription: project.name,
//            initInfoProvides: jar.baseName,
//    ]
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

webdriverBinaries {
    chromedriver "$chromeDriverVersion"
    geckodriver "$geckodriverVersion"
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

assets {
    minifyJs = true
    minifyCss = true
    enableSourceMaps = true
    includes = ['tinymce/**/*', 'compile/**/*.ttf', 'compile/**/*.otf', 'compile/**/*.eot', 'compile/**/*.svg', 'compile/**/*.woff', 'compile/**/*.woff2', 'compile/**/*.png', 'compile/**/*.jpg', 'compile/**/*.gif']
    excludes = ['compile/*', 'compile/**/*']
}

def gitSha() {
    execOutput 'git rev-parse --short HEAD'
}

def gitTimestamp() {
    execOutput 'git log -n 1 --format=%at'
}

def gitBranch() {
    execOutput 'git rev-parse --abbrev-ref HEAD'
}

String execOutput(String exec) {
    def p = exec.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        final text = p.errorStream.text
        logger.warn(text)
        return text
    }
    return p.text.trim()
}

def envProp(String name, defaultValue = 'UNKNOWN' ) {
    System.getenv(name) ?: System.getProperty(name) ?: (defaultValue instanceof Closure ? defaultValue() : defaultValue)?.toString()
}

processResources {
    filesMatching("**/*.yml") {
        filter(ReplaceTokens, tokens: [
                'info.build.ci' : envProp('CI', 'false'),
                'info.build.date' : new Date().toString(),
                'info.build.jdk' : envProp('TRAVIS_JDK_VERSION', System.getProperty('java.version')),
                'info.build.number' : envProp('TRAVIS_BUILD_NUMBER'),
                'info.git.branch' : envProp('TRAVIS_BRANCH', { gitBranch() }),
                'info.git.commit' : envProp('TRAVIS_COMMIT', { gitSha() }),
                'info.git.slug' : envProp('TRAVIS_REPO_SLUG'),
                'info.git.tag' : envProp('TRAVIS_TAG'),
                'info.git.timestamp' : gitTimestamp()
        ])
    }
}
